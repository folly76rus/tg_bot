import re
import asyncio
from bot import dp
from bot import bot
from sqlighter import SQLighter
from rustattoo import RusTattoo
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, ContentTypes

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
rt = RusTattoo(db)
like = CallbackData("like", "action")


@dp.message_handler(commands=['givepost'])
async def new_post(m: Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä
    new_publication = rt.new_publication()
    if new_publication:
        subscriptions = db.get_subscriptions()
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.insert(InlineKeyboardButton(text="üëç 0", callback_data=like.new(action=1)))
        keyboard.insert(InlineKeyboardButton(text="üëé 0", callback_data=like.new(action=0)))
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—å
        for s in subscriptions:
            await bot.send_photo(
                s[1],
                new_publication['url_photo'],
                caption=('[–°–º–æ—Ç—Ä–µ—Ç—å]({0})'.format(new_publication['link'])),
                disable_notification=True,
                parse_mode='MarkdownV2',
                reply_markup=keyboard
            )
            # –¥–æ–±–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –∏ —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å, —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
            db.add_publication(new_publication['id'], status=True)


# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä –∏ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä
        new_publication = rt.new_publication()
        if new_publication:
            subscriptions = db.get_subscriptions()
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.insert(InlineKeyboardButton(text="üëç 0", callback_data=like.new(action=1)))
            keyboard.insert(InlineKeyboardButton(text="üëé 0", callback_data=like.new(action=0)))
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—å
            for s in subscriptions:
                await bot.send_photo(
                    s[1],
                    new_publication['url_photo'],
                    caption=('[–°–º–æ—Ç—Ä–µ—Ç—å]({0})'.format(new_publication['link'])),
                    disable_notification=True,
                    parse_mode='MarkdownV2',
                    reply_markup=keyboard
                )
                # –¥–æ–±–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –∏ —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å, —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
                db.add_publication(new_publication['id'], status=True)


# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: Message):
    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, True)

    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: Message):
    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")


@dp.callback_query_handler(like.filter())
async def call(c: CallbackQuery, state: FSMContext, callback_data: dict):
    message_id = str(c.message.message_id)
    liked = int(callback_data.get("action"))

    markup = c.message.reply_markup.inline_keyboard[0]
    pos = int(re.search(r"(\d+)", markup[0]["text"])[0])
    neg = int(re.search(r"(\d+)", markup[1]["text"])[0])

    async with state.proxy() as data:
        prev_like = data.get(message_id, None)
        data[message_id] = liked
        if prev_like is not None:
            if liked and prev_like:
                pos -= 1
                await c.answer(f"–í—ã —É–±—Ä–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏—é")
                data[message_id] = None

            elif not liked and not prev_like:
                neg -= 1
                await c.answer(f"–í—ã —É–±—Ä–∞–ª–∏ —Ä–µ–∞–∫—Ü–∏—é")
                data[message_id] = None

            elif liked:
                pos += 1
                neg -= 1
                await c.answer(f"–í–∞–º –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")
            else:
                pos -= 1
                neg += 1
                await c.answer(f"–í–∞–º –ù–µ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")

        else:
            if liked:
                pos += 1
                await c.answer(f"–í–∞–º –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")

            else:
                neg += 1
                await c.answer(f"–í–∞–º –ù–µ –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.insert(InlineKeyboardButton(text=f"üëç {pos}", callback_data=like.new(action=1)))
    keyboard.insert(InlineKeyboardButton(text=f"üëé {neg}", callback_data=like.new(action=0)))
    await c.message.edit_reply_markup(keyboard)